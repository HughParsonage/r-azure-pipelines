parameters:
  args: "'--no-manual'"
  cache: true
  coverage: false

steps:
  - bash: |
      echo 'options(repos = "$(CRAN)", Ncpus = 2, crayon.enabled = TRUE, cli.unicode = TRUE)' > ~/.Rprofile
      mkdir -p $(R_LIBS_USER)
    displayName: "Setting up Unix R library"
  - ${{ if eq(parameters.cache, 'true') }}:
      - task: CacheBeta@0
        inputs:
          key: ./DESCRIPTION | "$(Agent.JobName)"
          path: $(R_LIBS_USER)
        displayName: 'Caching Packages'
        continueOnError: true
  - bash: |
      Rscript -e "install.packages(c('remotes', 'rcmdcheck'))"
      Rscript -e "remotes::install_deps(dependencies = TRUE)"
      Rscript -e "remotes::install_github('r-lib/pkgbuild')"
    displayName: 'Install package dependencies'
  - bash: |
      Rscript -e "rcmdcheck::rcmdcheck(args = ${{parameters.args}}, error_on = 'error', check_dir = 'check')"
    displayName: 'Check package'
  - task: PublishTestResults@1
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'check/*.Rcheck/tests/test-*.xml'
      testRunTitle: $(Agent.JobName)
    condition: succeededOrFailed()
  - publish: check
    artifact: $(Build.BuildNumber)-$(Agent.JobName)-check_results
    condition: succeededOrFailed()
  - ${{ if eq(parameters.coverage, 'true') }}:
      - bash: |
          Rscript -e "cov <- covr::package_coverage()" -e "covr::to_cobertura(cov, 'coverage.xml')"
        displayName: 'Run code coverage'
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: 'coverage.xml'
